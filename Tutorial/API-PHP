

==========================================================================
//SEND NOTIFICATION PHP
==========================================================================
<?php
    //Recuperar token ao iniciar aplicativo

    $token = 'cIxdPI16VMQ:APA91bHNrE8rJXITDXwP0lI51c-somT9c6fSgKubiYurPj8gan2s_2sSU7GadbCD5nmMO9fmyJFt1d6JbiHsEqvbldXmm1HOA2CR5o4j9LYXyesAIrQ39I33KRs6az8Hk89GvwbdoUwz';
    sendFCM($token, "Ola");

    function sendFCM($token, $message)
    {
        // Open connection
        $url = 'https://fcm.googleapis.com/fcm/send';

        $fields = array(
            'to' => $token,   
            'data' => array(
                'message' => $message,
                'action'=>'nova menssagem'
                )
        );

        $fields = json_encode($fields);

        //en configurações cloud message add chave servidor
        $headers = array(
            'Authorization: key=' . 'AAAAVktSnoE:APA91bGe6fibSlwy--DBJZ7VxQhB-3WC2VPpkVAD1jxxkrhWz42_s3_CJmdMnlOA1kdAa_0s4T-zQpngzgU2qOJtq2z_aOKolWtXcjfwJUmgnUa-nIgWoqRtAGB0kCSzFM9vqgWv0SRx',
            'Content-Type: application/json'
        );

        $ch = curl_init();  
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER,false );

        $result = curl_exec($ch);
        echo $result;
        curl_close($ch);
    }
==========================================================================
//FIM
==========================================================================



<?php
<?php
//receber
 public function notificar_ganhador(int $id)
    {
        $usuario = Usuario::where('id', '=', $id)
            ->select('token', 'nome', 'id')
            ->where('token', '<>', '')
            ->get()
            ->first();
        $token = $usuario['token'];
        $nome = $usuario['nome'];
        $message =  'Parabéns ' . $nome . ' seu número foi sorteado !';
        UtilController::useCurl($token, $message);

        // return response()->json($message, 201);

    }
//enviar 
namespace App\Http\Controllers;
//notificacao lumen
class UtilController extends Controller
{
    public static function useCurl($id, $message)
    {
        // Open connection
        $url = 'https://fcm.googleapis.com/fcm/send';

        $fields = array(
            'registration_ids' => array($id),
            'data' => array('message' => $message)
        );

        $fields = json_encode($fields);

        $headers = array(
            'Authorization: key=' . 'AIzaSyDUhqm31DsQyzMzq2VRUkO0v6GZg_eKZYs',
            'Content-Type: application/json'
        );

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);

        $result = curl_exec($ch);
        echo $result;
        curl_close($ch);
    }
}


?>
//===========================================================================================================
//======================================== JWT =============================================================


function validToken($token, $senha)
{
    $part       = explode(".",$token);
    $header     = $part[0];
    $payload    = $part[1];
    $signature  = $part[2];


    $senha = json_encode('123456');
    $senha = base64_encode('123456');
    $valid = hash_hmac('sha256',"$header.$payload", $senha, true);
    $valid = base64_encode($valid);

        
    if($signature == $valid)
        return true; 
    else
        return false;

        $header = base64_decode($header);
            $header = json_decode($header, true);
    
            echo "<pre>";
            print_r($header);
            echo "</pre>";
    
            $payload = base64_decode($payload);
            $payload = json_decode($payload, true);
    
            echo "<pre>";
            print_r($payload);
            echo "</pre>";
    
    }


?>

<?php

    //1 - 
    date_default_timezone_set('America/Sao_Paulo');
    $date = DateTime::createFromFormat('Y-m-d H:i:s', date("Y-m-d H:i:s"));

    // Modify the date
    $date->modify('+120 minutes');    
    
    $header = [
        'alg' => 'HS256',
        'typ' => 'JWT',
        //'exp' => $date->format('Y-m-d H:i:s'),
    ];

    
    $header = json_encode($header);
    $header = base64_encode($header);

    $payload = [
        'iss' => 'http://172.16.0.246/android-api/',
        'name' =>'admin',
    ];
    
    $payload = json_encode($payload);
    $payload = base64_encode($payload);

    $senha = json_encode('123456');
    $senha = base64_encode('123456');

    $signature = hash_hmac('sha256',"$header.$payload",$senha,true);
    $signature = base64_encode($signature);
    //enviar para o android
    $token = $header.".".$payload.".".$signature;

    echo $token;


    header('Content-Type: application/json');
    header('Accept: application/json');
    //header('Authorization: '.$senha);
    
    require "database.php";
    require "config.php";
    require "usuario.php";
    require "usuarioDao.php";

    if(isset($_POST['login']) && isset($_POST['senha']))
    {
        
        $usuario = new Usuario();
        $usuario->setLogin($_POST['login']);
        $usuario->setPassword($_POST['senha']);
        $usuarioDao = new UsuarioDao();
        
        if($usuarioDao->verificarConexao())
        {
            
            $usuarios = $usuarioDao->listarAll($usuario);
            if(count($usuarios) > 0)
            {
                foreach($usuarios as $values)
                {
                    $data[] = array(
                        'id'  =>$values['id'],
                        'login'  =>$values['login'],
                        'nome'  =>utf8_encode($values['nome']),
                        'senha'  =>utf8_encode($values['senha']),
                        'situacao'  =>utf8_encode($values['situacao']),
                        'perfis_id'  =>utf8_encode($values['perfis_id']),
                        'estacionamento_id'  =>utf8_encode($values['estacionamento_id']),
                        'area_id'  =>utf8_encode($values['area_id']),
                    );
                }   
                //echo json_encode($data); 
            }
            else
            {  
                resposta(UNAUTHORIZED, MSG_NOT_EXISTS_USUARIO, ''); 
            } 
        }          
        else
        {
            resposta(INTERNAL_SERVE_ERROR, MSG_ERROR_CONNECTION, ''); 
        }
    }
    else
    {
        resposta(UNAUTHORIZED, MSG_NOT_EXISTS_POST, ''); 
    }
        
    function resposta($resp, $msg, $error){
        $data[] = array(
            'resp'  => $resp,
            'msg'   => $msg,
            'error' => $error,
        );
        echo json_encode($data);
    }

?>

//===========================================================================================================
//=================================================== JWT ===================================================
//===========================================================================================================
//intervalo de data
$date = DateTime::createFromFormat('Y-m-d H:i:s', date("Y-m-d H:i:s"));

    // Modify the date
    $date->modify('+120 minutes');
    
    // Output
    echo $date->format('Y-m-d H:i:s')."<br>";
 

//crorrigir erro de utf-8
utf8_encode($values['descricao'])



    class Database
    {
        /*Método construtor do banco de dados*/
        //private function __construct(){}

        private function __clone(){}

        /*Método que destroi a conexão com banco de dados e remove da memória todas as variáveis setadas*/
        public function __destruct() 
        {
            $this->disconnect();
            foreach ($this as $key => $value) {
                unset($this->$key);
            }
        }

        private static $dbtype   = "mysql";
        private static $host     = "localhost";
        private static $port     = "3306";
        private static $user     = "root";
        private static $password = "";
        private static $db       = "api";
        //sprivate static $conexao;

        private function getDBType()  {return self::$dbtype;}
        private function getHost()    {return self::$host;}
        private function getPort()    {return self::$port;}
        private function getUser()    {return self::$user;}
        private function getPassword(){return self::$password;}
        private function getDB()      {return self::$db;}
        

        public function connect(){
            try
            {
                $this->conexao = new PDO("mysql:host=".$this->getHost().";dbname=".$this->getDB(),  $this->getUser(), $this->getPassword());
            }
            catch (PDOException $i)
            {
                die("Erro: <code>" . $i->getMessage() . "</code>");
            }
             
            return ($this->conexao);
        }
         
        public function disconnect(){
            $this->conexao = null;
        }

        public function insert($sql, $param=null)
        {
            try{
                $query = $this->connect()->prepare($sql);
                if($query->execute($param)){
                    $data[] = array('msg'=>'Dados inseridos com sucesso!');
                    return json_encode($data);
                }else{
                    $data[] = array('msg'=>'Erro ao inserir');
                    return json_encode($data); 
                }
                
            }
            catch(PDOException $ex)
            {
                $data[] = array('msg'=>"Error insert ".$ex->getMessage());
                return json_encode($data); 
            }
           
        }

        public function select($sql, $param=null)
        {
            $query  = $this->connect()->prepare($sql);

            if($query->execute($param))
            {
                while($row = $query->fetch()){
                    $data[] = array('id'=> $row['id'], 'nome'=>$row['nome'], 'email'=>$row['email']);
                }
                return json_encode($data);
            }
        }

        public function delete($sql, $param=null)
        {
            try
            {
                $data   = array();
                $query = $this->connect()->prepare($sql);
                if($query->execute($param))
                {
                    $data[] = array('msg'=>'Dados excluidos com sucesso !');
                    return json_encode($data);
                }
                else
                {
                    $data[] = array('msg'=>'Error ao deletar ');
                    return json_encode($data);
                }
            }
            catch(PDOException $ex)
            {
                echo "Error - ".$ex->getMessage();
            }
        }

        public function update($sql, $param=null)
        {
            try
            {
                $query = $this->connect()->prepare($sql);
                if($query->execute($param))
                {
                    $data[] = array('msg'=>'Update realizado com sucesso !');
                    return json_encode($data);
                }
                else
                {
                    $data[] = array('msg'=>'Error update !');
                    return json_encode($data);
                }
            }
            catch(PDOException $ex)
            {
                $data[] = array('msg'=>'Error - '.$ex->getMessage());
                return json_encode($data);
            }
        }
    }

    $database = new Database();

    $sql     = "INSERT INTO usuario (nome, email, pass) VALUES (:nome, :email, :pass)";
    $sql1    = "SELECT * FROM usuario ";
    $sql2    = "DELETE FROM usuario WHERE id = :id";
    $sql3    = "UPDATE usuario SET nome =:nome, email=:email, pass= :pass WHERE id =:id";
    
    $param   = array('nome'=>'ednei-2', 'email'=>'ed@gmail.com', 'pass'=>'123');
    $param1  = array('nome'=>'ednei-2', 'email'=>'ed@gmail.com', 'pass'=>'123');
    $param2  = array('id' => '5');
    $param3  = array('nome'=>'novo-xxx', 'email'=>'ed@gmail.com', 'pass'=>'123', 'id' => '1');

    echo "<br>====================== INSERT ======================<br>";
    $data = $database->insert($sql, $param);
    echo $data;
    echo "<br>";
     
    echo "<br>====================== DELETE ======================<br>";
    $data2   = $database->delete($sql2, $param2);
    echo $data2;
    echo "<br>";
    
    echo "<br>====================== UPDATE ======================<br>";
    $data3   = $database->update($sql3, $param3);
    echo $data3;
    echo "<br>";

    echo "<br>====================== SELECT ======================<br>";
    $data1 = $database->select($sql1, null);
    echo $data1;
    echo "<br>";

?>
